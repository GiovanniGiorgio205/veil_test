generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default("gen_random_uuid()")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  userId            String  @db.Uuid
  Users             Users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model AppUsers {
  id                 String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  login              String?
  email              String?
  encrypted_password String?
  recovery_code      String?
  role               String?       @default("12k-904")
  created_at         DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?     @default(now()) @db.Timestamptz(6)
  instance_id        String?       @db.Uuid
  birthday_date      DateTime?     @db.Date
  displayName        String?
  Applications       Applications? @relation(fields: [instance_id], references: [ID], onDelete: NoAction, onUpdate: NoAction)

  @@unique([id, login, email])
}

model Applications {
  ID              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ApplicationName String?
  Secret_Key      String        @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  API_Token       String        @default(dbgenerated("generate_api_token()"))
  Created_At      DateTime?     @default(now()) @db.Timestamptz(6)
  WS_ID           String?       @db.Uuid
  Updated_At      DateTime?     @default(now()) @db.Timestamptz(6)
  AppUsers        AppUsers[]
  Workspaces      Workspaces?   @relation(fields: [WS_ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "ws_fk")
  SSOProvider     SSOProvider[]
}

model SSOProvider {
  name           String
  clientId       String?
  clientSecret   String?
  authUrl        String?
  tokenUrl       String?
  userInfoUrl    String?
  callbackUrl    String?
  applicationsID String?       @db.Uuid
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Applications   Applications? @relation(fields: [applicationsID], references: [ID])
}

model Session {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Users {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  login             String?       @unique
  email             String        @unique
  role              String?       @default("12k-904")
  birthdayDate      DateTime?     @db.Timestamptz(6)
  createdAt         DateTime?     @default(now()) @db.Timestamptz(6)
  displayName       String?
  emailVerified     DateTime?
  encryptedPassword String?
  image             String?
  recoveryCode      String?
  updatedAt         DateTime?     @default(now()) @db.Timestamptz(6)
  type              account_type? @default(Free)
  Account           Account[]
  Session           Session[]
  Workspaces        Workspaces[]
}

model Workspaces {
  ID           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Name         String?
  Domain_Name  String         @unique
  Description  String?
  Access_Token String?
  WS_Type      WS_Type?
  UID          String?        @unique @db.Uuid
  Applications Applications[]
  Users        Users?         @relation(fields: [UID], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([UID], map: "fk_uid_FK")
}

model secret_keys {
  id         Int       @id @default(autoincrement())
  key        String    @unique
  created_at DateTime? @default(now()) @db.Timestamptz(6)
}

enum WS_Type {
  Personal
  Company
  Enterprise
}

enum account_type {
  Free
  Pro
  Enterprise
}
